{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","gif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGXC,mBAAS,IAHE,mBAGxCC,EAHwC,KAG5BC,EAH4B,KA8B/C,OACI,sBAAMC,SApBW,SAAEC,GAGnBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAG5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SA7Bc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAIbC,EAJa,iDAIoCC,UAAWH,GAJ/C,+DAOAI,MAAOF,GAPP,cAObG,EAPa,gBAUIA,EAAKC,OAVT,uBAUXC,EAVW,EAUXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBvB,kBAuBZM,GAvBY,4CAAH,sDCAPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,sBAAKc,UAAU,oCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCCCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECNb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA4BxC,OArBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IASEqB,EDjB0BK,CAAc1B,GAAlCa,EALwB,EAK7BN,KAAaa,EALgB,EAKhBA,QAYrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,0BAEb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAkB,GAAG,OAGX,aAFA,CAEC,EAAD,eAESA,GADCA,EAAIhB,aEOvBiB,EAtCM,WAAM,MAGa1C,mBAAS,CAAC,cAHvB,mBAGhB2C,EAHgB,KAGJ5C,EAHI,KAYvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAMA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADJA,Y,MCtBnC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b34fc211.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories })  => {\r\n\r\n    // Cremoas una constante que iremos cambiando según varíen los State\r\n    const [inputValue, setInputValue] = useState(''); // Tenemos que poner '' para que no sea un undefined y nos de un warning\r\n\r\n    // Usamos un método para modificar la variable inputValue\r\n    const handleInputChange = ( e ) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n\r\n        // Prevenimos que al hacer submit recarge el formulario\r\n        e.preventDefault();\r\n\r\n        // Validamos lo que nos entra por el input\r\n        if ( inputValue.trim().length > 2 ) {\r\n\r\n            // Activamos el setCategories que nos entra por las props\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            // Y vaciamos el inputValue\r\n            setInputValue('');\r\n\r\n        }\r\n\r\n\r\n    }\r\n    \r\n    // Usamos un form en lugar de un fragment, ya que también agrupa elementos y queremos hacer un formulario\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    // Creamos una variable para almacenar la url de consulta\r\n    // Necesitamos usar encodeURI para que convierta texto en otro que la url pueda usar\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=aPoK3ZwEGwlL1Y0xCLDv1aZsm7mPLpCp`\r\n\r\n    // Almacenamos la respuesta de la consulta en una variable\r\n    const resp = await fetch( url );\r\n\r\n    // Decodificamos la respuesta en formato json\r\n    const { data } = await resp.json();\r\n\r\n    // Extraemos la data que nos interesa de cada imagen, ya que tienen mucha información\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url, // Ponemos ? por si no trae images no nos de un error\r\n        }\r\n    })\r\n\r\n    // console.log( gifs );\r\n    // setImages( gifs );\r\n    return gifs; // Esto devuelve una promesa\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","// useEffect nos permite ejecutar cógido de forma condicional\r\nimport React from 'react' \r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // Importamos el hook y lo desestructuramos\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    // // Condicionamos el disparo del método getGifs\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //     // .then( imgs => setImages( imgs ) );\r\n    //     .then( setImages ); // al tener un solo argumento, se puede hacer más corta\r\n    // }, [ category ]); // Si añadimos [] solo se ejecuta cuando es renderizado por primera vez\r\n    // // Si añadimos [category] se vuelve a renderizar\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading.....</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( gif => (\r\n                        // <li key={ gif.id}> {gif.title} </li>\r\n                        // console.log({ ...gif })\r\n                        <GifGridItem \r\n                            key={ gif.id }\r\n                            { ...gif }\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            });\r\n\r\n    }, [ category ]);\r\n\r\n    // setTimeout( () => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000 );\r\n\r\n    return state; // { data: [], loading: true }\r\n\r\n\r\n}","// Importamos React\r\nimport React, { useState } from 'react'\r\n\r\n// Importamos Objetos\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dargon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // Añadimos una categeria\r\n    //     // setCategories( [...categories, 'HunterXHunter']);\r\n    //     setCategories( cats => [...cats, 'LOLA']);\r\n    // }\r\n\r\n    // Devolvemos un header\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            {/* Creamos una lista ordenada con los elementos de categories */}\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key= { category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;","// Importación para usar React\nimport React from 'react';\n// Importación para renderizar objetos en React\nimport ReactDOM from 'react-dom';\n\n// Importamos objetos\nimport GifExpertApp from './GifExpertApp';\n\n// Importamos un archivo de estilo\nimport './index.css';\n\n\n// Renderizamos el GifExpertApp\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr />"],"sourceRoot":""}